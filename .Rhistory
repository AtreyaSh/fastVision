dimR <- dimR[,c(3,4,1,2)]
### iterations ###
against <- rep(list("this should not match"), nrow(string))
dimR
while(check == FALSE){
dpi = 72
pdf_convert("./dataR/test.pdf", filenames = "./dataR/next.png", dpi = dpi)
im <- image_read("./dataR/next.png")
png <- readPNG("./dataR/next.png")
x <- ncol(png)
y <- nrow(png)
dimR[,c(1,3)] <- dimR[,c(1,3)]*x
dimR[,c(2,4)] <- dimR[,c(2,4)]*y
for(i in 1:nrow(dimR)){
string[i,] <- paste0(dimR[i,][1],"x",dimR[i,][2],"+",dimR[i,][3],"+",dimR[i,][4])
}
new <- lapply(1:nrow(string), function(i) image_crop(im, geometry = string[i,]))
test <- lapply(new, ocr)
check <- all(do.call("c", lapply(1:nrow(string), function(i) test[[i]] == against[[i]])))
if(check == FALSE){
against <- test
dpi = dpi + 50
file.remove("./dataR/next.png")
}
}
i
against
rm(list=ls())
### load libraries ###
if(!require(pdftools)) install.packages("pdftools")
library(pdftools)
if(!require(magick)) install.packages("magick")
library(magick)
if(!require(png)) install.packages("png")
library(png)
if(!require(tesseract)) install.packages("tesseract")
library(tesseract)
### define variables ###
check <- FALSE
string <- data.frame(matrix(ncol=1, nrow=0))
dimR <- read.csv("./results/results.csv", stringsAsFactors = FALSE)
dimR <- dimR[,c(3,4,1,2)]
### iterations ###
against <- rep(list("this should not match"), nrow(dimR))
while(check == FALSE){
dpi = 72
pdf_convert("./dataR/test.pdf", filenames = "./dataR/next.png", dpi = dpi)
im <- image_read("./dataR/next.png")
png <- readPNG("./dataR/next.png")
x <- ncol(png)
y <- nrow(png)
dimR[,c(1,3)] <- dimR[,c(1,3)]*x
dimR[,c(2,4)] <- dimR[,c(2,4)]*y
for(i in 1:nrow(dimR)){
string[i,] <- paste0(dimR[i,][1],"x",dimR[i,][2],"+",dimR[i,][3],"+",dimR[i,][4])
}
new <- lapply(1:nrow(string), function(i) image_crop(im, geometry = string[i,]))
test <- lapply(new, ocr)
check <- all(do.call("c", lapply(1:nrow(string), function(i) test[[i]] == against[[i]])))
if(check == FALSE){
against <- test
dpi = dpi + 50
file.remove("./dataR/next.png")
}
}
string
x
y
dimR[,c(1,3)]*x
dimR[,c(1,3)]
rm(list=ls())
### load libraries ###
if(!require(pdftools)) install.packages("pdftools")
library(pdftools)
if(!require(magick)) install.packages("magick")
library(magick)
if(!require(png)) install.packages("png")
library(png)
if(!require(tesseract)) install.packages("tesseract")
library(tesseract)
### define variables ###
check <- FALSE
string <- data.frame(matrix(ncol=1, nrow=0))
dimR <- read.csv("./results/results.csv", stringsAsFactors = FALSE)
dimR <- dimR[,c(3,4,1,2)]
dimTmp <- dimR
### iterations ###
against <- rep(list("this should not match"), nrow(dimR))
while(check == FALSE){
dpi = 72
pdf_convert("./dataR/test.pdf", filenames = "./dataR/next.png", dpi = dpi)
im <- image_read("./dataR/next.png")
png <- readPNG("./dataR/next.png")
x <- ncol(png)
y <- nrow(png)
dimTmp[,c(1,3)] <- dimR[,c(1,3)]*x
dimTmp[,c(2,4)] <- dimR[,c(2,4)]*y
for(i in 1:nrow(dimR)){
string[i,] <- paste0(dimTmp[i,][1],"x",dimTmp[i,][2],"+",dimTmp[i,][3],"+",dimTmp[i,][4])
}
new <- lapply(1:nrow(string), function(i) image_crop(im, geometry = string[i,]))
test <- lapply(new, ocr)
check <- all(do.call("c", lapply(1:nrow(string), function(i) test[[i]] == against[[i]])))
if(check == FALSE){
against <- test
dpi = dpi + 50
file.remove("./dataR/next.png")
}
}
dpi
test
against
check
dpi + 50
rm(list=ls())
### load libraries ###
if(!require(pdftools)) install.packages("pdftools")
library(pdftools)
if(!require(magick)) install.packages("magick")
library(magick)
if(!require(png)) install.packages("png")
library(png)
if(!require(tesseract)) install.packages("tesseract")
library(tesseract)
### define variables ###
check <- FALSE
dpi = 72
string <- data.frame(matrix(ncol=1, nrow=0))
dimR <- read.csv("./results/results.csv", stringsAsFactors = FALSE)
dimR <- dimR[,c(3,4,1,2)]
dimTmp <- dimR
### iterations ###
against <- rep(list("this should not match"), nrow(dimR))
while(check == FALSE){
pdf_convert("./dataR/test.pdf", filenames = "./dataR/next.png", dpi = dpi)
im <- image_read("./dataR/next.png")
png <- readPNG("./dataR/next.png")
x <- ncol(png)
y <- nrow(png)
dimTmp[,c(1,3)] <- dimR[,c(1,3)]*x
dimTmp[,c(2,4)] <- dimR[,c(2,4)]*y
for(i in 1:nrow(dimR)){
string[i,] <- paste0(dimTmp[i,][1],"x",dimTmp[i,][2],"+",dimTmp[i,][3],"+",dimTmp[i,][4])
}
new <- lapply(1:nrow(string), function(i) image_crop(im, geometry = string[i,]))
test <- lapply(new, ocr)
check <- all(do.call("c", lapply(1:nrow(string), function(i) test[[i]] == against[[i]])))
if(check == FALSE){
against <- test
dpi = dpi + 30
file.remove("./dataR/next.png")
}
}
tests
test
against
dpi
test[[1]] == against[[1]]
test[[2]] == against[[2]]
check <- all(do.call("c", lapply(1:nrow(string), function(i) test[[i]] == against[[i]])))
check
### load libraries ###
if(!require(pdftools)) install.packages("pdftools")
library(pdftools)
if(!require(magick)) install.packages("magick")
library(magick)
if(!require(png)) install.packages("png")
library(png)
if(!require(tesseract)) install.packages("tesseract")
library(tesseract)
### define variables ###
check <- FALSE
dpi = 72
string <- data.frame(matrix(ncol=1, nrow=0))
dimR <- read.csv("./results/results.csv", stringsAsFactors = FALSE)
dimR <- dimR[,c(3,4,1,2)]
dimTmp <- dimR
### iterations ###
against <- rep(list("this should not match"), nrow(dimR))
while(check == FALSE){
pdf_convert("./dataR/test.pdf", filenames = "./dataR/next.png", dpi = dpi)
im <- image_read("./dataR/next.png")
png <- readPNG("./dataR/next.png")
x <- ncol(png)
y <- nrow(png)
dimTmp[,c(1,3)] <- dimR[,c(1,3)]*x
dimTmp[,c(2,4)] <- dimR[,c(2,4)]*y
for(i in 1:nrow(dimR)){
string[i,] <- paste0(dimTmp[i,][1],"x",dimTmp[i,][2],"+",dimTmp[i,][3],"+",dimTmp[i,][4])
}
new <- lapply(1:nrow(string), function(i) image_crop(im, geometry = string[i,]))
test <- lapply(new, ocr)
check <- all(do.call("c", lapply(1:nrow(string), function(i) test[[i]] == against[[i]])))
if(check == FALSE){
against <- test
dpi = dpi + 30
file.remove("./dataR/next.png")
}
}
check
dpi
rm(list=ls())
### load libraries ###
if(!require(pdftools)) install.packages("pdftools")
library(pdftools)
if(!require(magick)) install.packages("magick")
library(magick)
if(!require(png)) install.packages("png")
library(png)
if(!require(tesseract)) install.packages("tesseract")
library(tesseract)
### define variables ###
check <- FALSE
dpi = 72
string <- data.frame(matrix(ncol=1, nrow=0))
dimR <- read.csv("./results/results.csv", stringsAsFactors = FALSE)
dimR <- dimR[,c(3,4,1,2)]
dimTmp <- dimR
### iterations ###
against <- rep(list("this should not match"), nrow(dimR))
while(check == FALSE){
pdf_convert("./dataR/test.pdf", filenames = "./dataR/next.png", dpi = dpi)
im <- image_read("./dataR/next.png")
png <- readPNG("./dataR/next.png")
x <- ncol(png)
y <- nrow(png)
dimTmp[,c(1,3)] <- dimR[,c(1,3)]*x
dimTmp[,c(2,4)] <- dimR[,c(2,4)]*y
for(i in 1:nrow(dimR)){
string[i,] <- paste0(dimTmp[i,][1],"x",dimTmp[i,][2],"+",dimTmp[i,][3],"+",dimTmp[i,][4])
}
new <- lapply(1:nrow(string), function(i) image_crop(im, geometry = string[i,]))
test <- lapply(new, ocr)
check <- all(do.call("c", lapply(1:nrow(string), function(i) test[[i]] == against[[i]])))
if(check == FALSE){
against <- test
dpi = dpi + 10
file.remove("./dataR/next.png")
}
}
dpi
check
test
againsgt
against
!is.numeric(c(10, 20))
!is.numeric(10)
!is.numeric(c(10, 20))
is.numeric(c(10,20))
is.numeric(c(10,20))
!is.numeric(c(10,20))
dpiStart = c(10,20)
if(!is.numeric(dpiStart) | length(dpiStart) > 1){
stop("dpiStart must be numerical")
}
!is.numeric(dpiStart) | length(dpiStart) > 1
!is.numeric(dpiStart)
length(dpiStart) > 1
if(!is.numeric(dpiStart) & length(dpiStart) > 1){
stop("dpiStart must be numerical")
}
dpiStart
dpiStart = 10
if(!is.numeric(dpiStart) | length(dpiStart) > 1){
stop("dpiStart must be numerical")
}
### load libraries ###
if(!require(pdftools)) install.packages("pdftools")
library(pdftools)
if(!require(magick)) install.packages("magick")
library(magick)
if(!require(png)) install.packages("png")
library(png)
if(!require(tesseract)) install.packages("tesseract")
library(tesseract)
optimizeDPI <- function(pdfPath, dimPath, dpiStart = 72, dpiInc = 10){
### check dependencies ###
if(!file.exists(pdfPath)){
stop("pdfPath does not exist")
}
if(!file.exists(dimPath)){
stop("dimPath does not exist")
}
if(!is.numeric(dpiStart) | length(dpiStart) > 1){
stop("dpiStart must be numerical")
}
if(!is.numeric(dpiInc) | length(dpiInc) > 1){
stop("dpiInc must be numerical")
}
### define variables ###
check <- FALSE
dpi = dpiStart
string <- data.frame(matrix(ncol=1, nrow=0))
dimR <- read.csv(dimPath, stringsAsFactors = FALSE)
dimR <- dimR[,c(3,4,1,2)]
dimTmp <- dimR
### iterations ###
against <- rep(list("akyiap912lsasnf1924"), nrow(dimR))
while(check == FALSE){
pdf_convert(pdfPath, filenames = "./dataR/next.png", dpi = dpi)
im <- image_read("./dataR/next.png")
png <- readPNG("./dataR/next.png")
x <- ncol(png)
y <- nrow(png)
dimTmp[,c(1,3)] <- dimR[,c(1,3)]*x
dimTmp[,c(2,4)] <- dimR[,c(2,4)]*y
for(i in 1:nrow(dimR)){
string[i,] <- paste0(dimTmp[i,][1],"x",dimTmp[i,][2],"+",dimTmp[i,][3],"+",dimTmp[i,][4])
}
new <- lapply(1:nrow(string), function(i) image_crop(im, geometry = string[i,]))
test <- lapply(new, ocr)
check <- all(do.call("c", lapply(1:nrow(string), function(i) test[[i]] == against[[i]])))
if(check == FALSE){
against <- test
dpi = dpi + 10
file.remove("./dataR/next.png")
}
}
return(dpi)
}
a <- optimizeDPI("./dataR/test.pdf", "./results/results.cs")
a <- optimizeDPI("./dataR/test.pdf", "./results/results.csv")
a
dimR
dimTmp
test
against
sample(LETTERS, 5)
sample(LETTERS, 5, replace=TRUE)
n/3
10/3
sample(letters, 10)
do.call("c", sample(letters, 10))
rep(list(do.call("c", sample(letters, 10))), nrow(dimR))
sample(letters, 10)
do.call("c", sample(letters, 10, replace = TRUE))
c(sample(letters, 10, replace = TRUE))
paste0(sample(letters, 10, replace = TRUE))
paste0(sample(letters, 10, replace = TRUE),collapse = "")
paste0(sample(letters, 10, replace = TRUE),collapse = "")
rep(list(paste0(sample(letters, 10, replace = TRUE),collapse = ""), nrow(dimR)))
rep(list(paste0(sample(letters, 10, replace = TRUE),collapse = ""), nrow(dimR)))
list(rep(paste0(sample(letters, 10, replace = TRUE),collapse = ""), nrow(dimR)))
list(paste0(sample(letters, 10, replace = TRUE),collapse = ""))
rep(list(paste0(sample(letters, 10, replace = TRUE),collapse = "")), nrow(dimR))
rep(list(paste0(sample(letters, 10, replace = TRUE),collapse = "")), nrow(dimR))
source("./aux/randString.R", encoding = "UTF-8")
rep(list(randString(10)), nrow(dimR))
lapply(1:nrow(dimR), randString(10))
lapply(1:nrow(dimR), function(x) randString(10))
against <- lapply(1:nrow(dimR), function(x) randString(10))
lapply(1:nrow(dimR), function(x) randString(10))
lapply(1:nrow(dimR), function(x) randString(10))
sapply(1:nrow(dimR), function(i) paste0(dimTmp[i,][1],"x",dimTmp[i,][2],"+",dimTmp[i,][3],"+",dimTmp[i,][4]))
### load libraries ###
if(!require(pdftools)) install.packages("pdftools")
library(pdftools)
if(!require(magick)) install.packages("magick")
library(magick)
if(!require(png)) install.packages("png")
library(png)
if(!require(tesseract)) install.packages("tesseract")
library(tesseract)
source("./aux/randString.R", encoding = "UTF-8")
optimizeDPI <- function(pdfPath, dimPath, dpiStart = 72, dpiInc = 10){
### check dependencies ###
if(!file.exists(pdfPath)){
stop("pdfPath does not exist")
}
if(!file.exists(dimPath)){
stop("dimPath does not exist")
}
if(!is.numeric(dpiStart) | length(dpiStart) > 1){
stop("dpiStart must be numerical")
}
if(!is.numeric(dpiInc) | length(dpiInc) > 1){
stop("dpiInc must be numerical")
}
### define variables ###
check <- FALSE
dpi = dpiStart
dimR <- read.csv(dimPath, stringsAsFactors = FALSE)
dimR <- dimR[,c(3,4,1,2)]
dimTmp <- dimR
### iterations ###
against <- lapply(1:nrow(dimR), function(x) randString(10))
while(check == FALSE){
pdf_convert(pdfPath, filenames = "./dataR/next.png", dpi = dpi)
im <- image_read("./dataR/next.png")
png <- readPNG("./dataR/next.png")
x <- ncol(png)
y <- nrow(png)
dimTmp[,c(1,3)] <- dimR[,c(1,3)]*x
dimTmp[,c(2,4)] <- dimR[,c(2,4)]*y
string <- sapply(1:nrow(dimR), function(i) paste0(dimTmp[i,][1],"x",dimTmp[i,][2],"+",dimTmp[i,][3],"+",dimTmp[i,][4]))
new <- lapply(1:nrow(string), function(i) image_crop(im, geometry = string[i,]))
test <- lapply(new, ocr)
check <- all(do.call("c", lapply(1:nrow(string), function(i) test[[i]] == against[[i]])))
if(check == FALSE){
against <- test
dpi = dpi + 10
file.remove("./dataR/next.png")
}
}
return(dpi)
}
a <- optimizeDPI("./dataR/test.pdf", "./results/results.cs", dpiInc = 50)
getwd()
a <- optimizeDPI("./dataR/test.pdf", "./results/results.csv", dpiInc = 50)
string
dimTmp
pdfPath = "./dataR/test.pdf"
dimPath = "./results/results.csv"
dpiStart = 72
dpiInc = 10
if(!file.exists(pdfPath)){
stop(paste0(pdfPath, " does not exist"))
}
if(!file.exists(dimPath)){
stop(paste0(dimPath, " does not exist"))
}
if(!is.numeric(dpiStart) | length(dpiStart) > 1){
stop("dpiStart must be numerical")
}
if(!is.numeric(dpiInc) | length(dpiInc) > 1){
stop("dpiInc must be numerical")
}
check <- FALSE
dpi = dpiStart
dimR <- read.csv(dimPath, stringsAsFactors = FALSE)
dimR <- dimR[,c(3,4,1,2)]
dimTmp <- dimR
### iterations ###
against <- lapply(1:nrow(dimR), function(x) randString(10))
pdf_convert(pdfPath, filenames = "./dataR/next.png", dpi = dpi)
im <- image_read("./dataR/next.png")
png <- readPNG("./dataR/next.png")
x <- ncol(png)
y <- nrow(png)
dimTmp[,c(1,3)] <- dimR[,c(1,3)]*x
dimTmp[,c(2,4)] <- dimR[,c(2,4)]*y
sapply(1:nrow(dimR), function(i) paste0(dimTmp[i,][1],"x",dimTmp[i,][2],"+",dimTmp[i,][3],"+",dimTmp[i,][4]))
lapply(1:nrow(dimR), function(i) paste0(dimTmp[i,][1],"x",dimTmp[i,][2],"+",dimTmp[i,][3],"+",dimTmp[i,][4]))
string <- lapply(1:nrow(dimR), function(i) paste0(dimTmp[i,][1],"x",dimTmp[i,][2],"+",dimTmp[i,][3],"+",dimTmp[i,][4]))
new <- lapply(1:length(string), function(i) image_crop(im, geometry = string[[i]]))
test <- lapply(new, ocr)
check <- all(do.call("c", lapply(1:length(string), function(i) test[[i]] == against[[i]])))
check
test
against
### load libraries ###
if(!require(pdftools)) install.packages("pdftools")
library(pdftools)
if(!require(magick)) install.packages("magick")
library(magick)
if(!require(png)) install.packages("png")
library(png)
if(!require(tesseract)) install.packages("tesseract")
library(tesseract)
source("./aux/randString.R", encoding = "UTF-8")
optimizeDPI <- function(pdfPath, dimPath, dpiStart = 72, dpiInc = 10){
### check dependencies ###
if(!file.exists(pdfPath)){
stop(paste0(pdfPath, " does not exist"))
}
if(!file.exists(dimPath)){
stop(paste0(dimPath, " does not exist"))
}
if(!is.numeric(dpiStart) | length(dpiStart) > 1){
stop("dpiStart must be numerical")
}
if(!is.numeric(dpiInc) | length(dpiInc) > 1){
stop("dpiInc must be numerical")
}
### define variables ###
check <- FALSE
dpi = dpiStart
dimR <- read.csv(dimPath, stringsAsFactors = FALSE)
dimR <- dimR[,c(3,4,1,2)]
dimTmp <- dimR
### iterations ###
against <- lapply(1:nrow(dimR), function(x) randString(10))
while(check == FALSE){
pdf_convert(pdfPath, filenames = "./dataR/next.png", dpi = dpi)
im <- image_read("./dataR/next.png")
png <- readPNG("./dataR/next.png")
x <- ncol(png)
y <- nrow(png)
dimTmp[,c(1,3)] <- dimR[,c(1,3)]*x
dimTmp[,c(2,4)] <- dimR[,c(2,4)]*y
string <- lapply(1:nrow(dimR), function(i) paste0(dimTmp[i,][1],"x",dimTmp[i,][2],"+",dimTmp[i,][3],"+",dimTmp[i,][4]))
new <- lapply(1:length(string), function(i) image_crop(im, geometry = string[[i]]))
test <- lapply(new, ocr)
check <- all(do.call("c", lapply(1:length(string), function(i) test[[i]] == against[[i]])))
if(check == FALSE){
against <- test
dpi = dpi + 10
file.remove("./dataR/next.png")
}
}
return(dpi)
}
a <- optimizeDPI("./dataR/test.pdf", "./results/results.csv", dpiInc = 50)
dpi
a
string
new
read.csv(dimPath, stringsAsFactors = FALSE)[,c(3,4,1,2)]
dimR
source("optimizeDPI.R", encoding = "UTF-8")
dpi <- 332
write.csv(dpi, "./results/dpi.csv", row.names = FALSE)
